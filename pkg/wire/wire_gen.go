// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/ekowdd89/go-gin-boilerplate/pkg/cmd"
	"github.com/ekowdd89/go-gin-boilerplate/pkg/httpserver"
	"github.com/ekowdd89/go-gin-boilerplate/pkg/postgres"
	"github.com/ekowdd89/go-gin-boilerplate/utils"
	"net"
)

// Injectors from wire.go:

func InitializeCmd() (*cmd.Cmd, error) {
	postgres, err := ProvidePostgres()
	if err != nil {
		return nil, err
	}
	listener, err := ProvideListener()
	if err != nil {
		return nil, err
	}
	httpServer, err := ProvideHttpServer(postgres, listener)
	if err != nil {
		return nil, err
	}
	cmdCmd, err := ProvideCmd(httpServer, postgres)
	if err != nil {
		return nil, err
	}
	return cmdCmd, nil
}

// wire.go:

func ProvidePostgres() (*postgres.Postgres, error) {
	return postgres.New()
}

func ProvideListener() (net.Listener, error) {
	return net.Listen("tcp", ":8080")
}

func ProvideHttpServer(
	p *postgres.Postgres,
	l net.Listener,
) (*httpserver.HttpServer, error) {
	return httpserver.New(httpserver.WithListener(l), httpserver.WithUserRepository(p), httpserver.WithMemberRepository(p))
}

func ProvideCmd(
	s *httpserver.HttpServer,
	p *postgres.Postgres,
) (c *cmd.Cmd, err error) {
	c = &cmd.Cmd{
		Dotenv:   true,
		EnvPrefx: "GO_GIN_",
		H:        s,
		P:        p,
	}
	err = utils.LoadEnv(c, utils.LoadEnvOptions{
		EnvPrefix: c.EnvPrefx,
		Dotenv:    c.Dotenv,
	})
	if err != nil {
		return nil, err
	}
	return
}
